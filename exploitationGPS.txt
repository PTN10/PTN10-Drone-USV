#include <Wire.h>
#include <TinyGPS.h>

// Adresse I2C du CMPS 12
#define ADRESSE_CMPS12 0x60

// GPS NEO 6M
#define GPS_SERIAL Serial1 // En supposant que le module GPS est connecté à Serial1 sur Arduino Mega

TinyGPS gps;

void setup() {
  Serial.begin(9600);
  GPS_SERIAL.begin(9600);
  Wire.begin();  // Initialiser I2C
  delay(1000);

  Serial.println("Configuration terminée. Démarrage de la boucle...");
}

void loop() {
  // Lire la direction actuelle du CMPS 12
  int direction = lireDirection();

  // Lire les données GPS
  lireGPS();

  // Afficher la direction et les données GPS sur le moniteur série
  Serial.print("Direction : ");
  Serial.println(direction);
  afficherDonneesGPS();

  delay(1000); // Ajouter une pause pour une meilleure lisibilité
  Serial.println("Boucle exécutée. Attente de la prochaine itération...");
}

int lireDirection() {
  Wire.beginTransmission(ADRESSE_CMPS12);
  Wire.write(0x13); // Demander la direction de 16 bits au CMPS12
  Wire.endTransmission();

  // Demander 2 octets
  Wire.requestFrom(ADRESSE_CMPS12, 2);
  while (Wire.available() < 2);
  byte octetHaut = Wire.read();
  byte octetBas = Wire.read();

  int direction = (octetHaut << 8) | octetBas;
  Serial.print("Direction CMPS 12 : ");
  Serial.println(direction);
  return direction;
}

void lireGPS() {
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      Serial.println("Données GPS reçues et décodées.");
      // Traiter les données GPS selon les besoins
    }
  }
}

void afficherDonneesGPS() {
  float latitude, longitude;
  unsigned long age;
  gps.f_get_position(&latitude, &longitude, &age);

  if (age == TinyGPS::GPS_INVALID_AGE) {
    Serial.println("En attente d'une correction GPS...");
  } else {
    Serial.print("Latitude : ");
    Serial.println(latitude, 6);
    Serial.print("Longitude : ");
    Serial.println(longitude, 6);
    Serial.print("Altitude : ");
    Serial.println(
